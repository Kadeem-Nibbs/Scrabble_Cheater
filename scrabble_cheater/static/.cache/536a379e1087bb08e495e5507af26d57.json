{"dependencies":[{"name":"babel-runtime/helpers/slicedToArray","loc":{"line":8,"column":30}},{"name":"lodash/has","loc":{"line":12,"column":20}},{"name":"lodash/keys","loc":{"line":16,"column":21}},{"name":"lodash/forEach","loc":{"line":20,"column":24}},{"name":"lodash/filter","loc":{"line":24,"column":23}},{"name":"lodash/keyBy","loc":{"line":28,"column":22}},{"name":"react","loc":{"line":32,"column":21}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeChildMappings = exports.getChildMapping = undefined;\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _has2 = require('lodash/has');\n\nvar _has3 = _interopRequireDefault(_has2);\n\nvar _keys2 = require('lodash/keys');\n\nvar _keys3 = _interopRequireDefault(_keys2);\n\nvar _forEach2 = require('lodash/forEach');\n\nvar _forEach3 = _interopRequireDefault(_forEach2);\n\nvar _filter2 = require('lodash/filter');\n\nvar _filter3 = _interopRequireDefault(_filter2);\n\nvar _keyBy2 = require('lodash/keyBy');\n\nvar _keyBy3 = _interopRequireDefault(_keyBy2);\n\nvar _react = require('react');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Given `this.props.children`, return an object mapping key to child.\n *\n * @param {object} children Element's children\n * @return {object} Mapping of key to child\n */\nvar getChildMapping = exports.getChildMapping = function getChildMapping(children) {\n  return (0, _keyBy3.default)((0, _filter3.default)(_react.Children.toArray(children), _react.isValidElement), 'key');\n};\n\nvar getPendingKeys = function getPendingKeys(prev, next) {\n  var nextKeysPending = {};\n  var pendingKeys = [];\n\n  (0, _forEach3.default)((0, _keys3.default)(prev), function (prevKey) {\n    if (!(0, _has3.default)(next, prevKey)) {\n      pendingKeys.push(prevKey);\n      return;\n    }\n\n    if (pendingKeys.length) {\n      nextKeysPending[prevKey] = pendingKeys;\n      pendingKeys = [];\n    }\n  });\n\n  return [nextKeysPending, pendingKeys];\n};\n\nvar getValue = function getValue(key, prev, next) {\n  return (0, _has3.default)(next, key) ? next[key] : prev[key];\n};\n\n/**\n * When you're adding or removing children some may be added or removed in the same render pass. We want to show *both*\n * since we want to simultaneously animate elements in and out. This function takes a previous set of keys and a new set\n * of keys and merges them with its best guess of the correct ordering.\n *\n * @param {object} prev Prev children as returned from `getChildMapping()`\n * @param {object} next Next children as returned from `getChildMapping()`\n * @return {object} A key set that contains all keys in `prev` and all keys in `next` in a reasonable order\n */\nvar mergeChildMappings = exports.mergeChildMappings = function mergeChildMappings() {\n  var prev = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var next = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var childMapping = {};\n\n  var _getPendingKeys = getPendingKeys(prev, next),\n      _getPendingKeys2 = (0, _slicedToArray3.default)(_getPendingKeys, 2),\n      nextKeysPending = _getPendingKeys2[0],\n      pendingKeys = _getPendingKeys2[1];\n\n  (0, _forEach3.default)((0, _keys3.default)(next), function (nextKey) {\n    if ((0, _has3.default)(nextKeysPending, nextKey)) {\n      (0, _forEach3.default)(nextKeysPending[nextKey], function (pendingKey) {\n        childMapping[pendingKey] = getValue(pendingKey, prev, next);\n      });\n    }\n\n    childMapping[nextKey] = getValue(nextKey, prev, next);\n  });\n\n  (0, _forEach3.default)(pendingKeys, function (pendingKey) {\n    childMapping[pendingKey] = getValue(pendingKey, prev, next);\n  });\n\n  return childMapping;\n};"},"hash":"e8f2f1e0bd3bae9a7cffeb6a927be8f3"}