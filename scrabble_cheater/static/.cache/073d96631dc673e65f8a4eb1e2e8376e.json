{"dependencies":[{"name":"babel-runtime/helpers/extends","loc":{"line":7,"column":24}},{"name":"lodash/without","loc":{"line":11,"column":24}},{"name":"classnames","loc":{"line":15,"column":26}},{"name":"prop-types","loc":{"line":19,"column":25}},{"name":"react","loc":{"line":23,"column":21}},{"name":"../../lib","loc":{"line":27,"column":19}},{"name":"./CardDescription","loc":{"line":29,"column":31}},{"name":"./CardHeader","loc":{"line":33,"column":26}},{"name":"./CardMeta","loc":{"line":37,"column":24}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _without2 = require('lodash/without');\n\nvar _without3 = _interopRequireDefault(_without2);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lib = require('../../lib');\n\nvar _CardDescription = require('./CardDescription');\n\nvar _CardDescription2 = _interopRequireDefault(_CardDescription);\n\nvar _CardHeader = require('./CardHeader');\n\nvar _CardHeader2 = _interopRequireDefault(_CardHeader);\n\nvar _CardMeta = require('./CardMeta');\n\nvar _CardMeta2 = _interopRequireDefault(_CardMeta);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\n/**\n * A card can contain blocks of content or extra content meant to be formatted separately from the main content.\n */\nfunction CardContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      description = props.description,\n      extra = props.extra,\n      header = props.header,\n      meta = props.meta,\n      textAlign = props.textAlign;\n\n  var classes = (0, _classnames2.default)((0, _lib.useKeyOnly)(extra, 'extra'), (0, _lib.useTextAlignProp)(textAlign), 'content', className);\n  var rest = (0, _lib.getUnhandledProps)(CardContent, props);\n  var ElementType = (0, _lib.getElementType)(CardContent, props);\n\n  if (!_lib.childrenUtils.isNil(children)) return _react2.default.createElement(ElementType, (0, _extends3.default)({}, rest, { className: classes }), children);\n  if (!_lib.childrenUtils.isNil(content)) return _react2.default.createElement(ElementType, (0, _extends3.default)({}, rest, { className: classes }), content);\n\n  return _react2.default.createElement(ElementType, (0, _extends3.default)({}, rest, { className: classes }), (0, _lib.createShorthand)(_CardHeader2.default, function (val) {\n    return { content: val };\n  }, header), (0, _lib.createShorthand)(_CardMeta2.default, function (val) {\n    return { content: val };\n  }, meta), (0, _lib.createShorthand)(_CardDescription2.default, function (val) {\n    return { content: val };\n  }, description));\n}\n\nCardContent.handledProps = ['as', 'children', 'className', 'content', 'description', 'extra', 'header', 'meta', 'textAlign'];\nCardContent._meta = {\n  name: 'CardContent',\n  parent: 'Card',\n  type: _lib.META.TYPES.VIEW\n};\n\nCardContent.propTypes = \"development\" !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: _lib.customPropTypes.as,\n\n  /** Primary content. */\n  children: _propTypes2.default.node,\n\n  /** Additional classes. */\n  className: _propTypes2.default.string,\n\n  /** Shorthand for primary content. */\n  content: _lib.customPropTypes.contentShorthand,\n\n  /** Shorthand for CardDescription. */\n  description: _lib.customPropTypes.itemShorthand,\n\n  /** A card can contain extra content meant to be formatted separately from the main content. */\n  extra: _propTypes2.default.bool,\n\n  /** Shorthand for CardHeader. */\n  header: _lib.customPropTypes.itemShorthand,\n\n  /** Shorthand for CardMeta. */\n  meta: _lib.customPropTypes.itemShorthand,\n\n  /** A card content can adjust its text alignment. */\n  textAlign: _propTypes2.default.oneOf((0, _without3.default)(_lib.SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\n\nexports.default = CardContent;"},"hash":"6f6c235ceee0ce343e71758a86fdd67e"}