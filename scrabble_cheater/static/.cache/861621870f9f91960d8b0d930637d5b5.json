{"dependencies":[{"name":"babel-runtime/helpers/extends","loc":{"line":7,"column":24}},{"name":"babel-runtime/helpers/classCallCheck","loc":{"line":11,"column":31}},{"name":"babel-runtime/helpers/createClass","loc":{"line":15,"column":28}},{"name":"babel-runtime/helpers/possibleConstructorReturn","loc":{"line":19,"column":42}},{"name":"babel-runtime/helpers/inherits","loc":{"line":23,"column":25}},{"name":"lodash/round","loc":{"line":27,"column":22}},{"name":"lodash/clamp","loc":{"line":31,"column":22}},{"name":"lodash/isUndefined","loc":{"line":35,"column":28}},{"name":"lodash/without","loc":{"line":39,"column":24}},{"name":"classnames","loc":{"line":43,"column":26}},{"name":"prop-types","loc":{"line":47,"column":25}},{"name":"react","loc":{"line":51,"column":21}},{"name":"../../lib","loc":{"line":55,"column":19}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _round2 = require('lodash/round');\n\nvar _round3 = _interopRequireDefault(_round2);\n\nvar _clamp2 = require('lodash/clamp');\n\nvar _clamp3 = _interopRequireDefault(_clamp2);\n\nvar _isUndefined2 = require('lodash/isUndefined');\n\nvar _isUndefined3 = _interopRequireDefault(_isUndefined2);\n\nvar _without2 = require('lodash/without');\n\nvar _without3 = _interopRequireDefault(_without2);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lib = require('../../lib');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\n/**\n * A progress bar shows the progression of a task.\n */\nvar Progress = function (_Component) {\n  (0, _inherits3.default)(Progress, _Component);\n\n  function Progress() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, Progress);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Progress.__proto__ || Object.getPrototypeOf(Progress)).call.apply(_ref, [this].concat(args))), _this), _this.calculatePercent = function () {\n      var _this$props = _this.props,\n          percent = _this$props.percent,\n          total = _this$props.total,\n          value = _this$props.value;\n\n      if (!(0, _isUndefined3.default)(percent)) return percent;\n      if (!(0, _isUndefined3.default)(total) && !(0, _isUndefined3.default)(value)) return value / total * 100;\n    }, _this.getPercent = function () {\n      var precision = _this.props.precision;\n\n      var percent = (0, _clamp3.default)(_this.calculatePercent(), 0, 100);\n\n      if ((0, _isUndefined3.default)(precision)) return percent;\n      return (0, _round3.default)(percent, precision);\n    }, _this.isAutoSuccess = function () {\n      var _this$props2 = _this.props,\n          autoSuccess = _this$props2.autoSuccess,\n          percent = _this$props2.percent,\n          total = _this$props2.total,\n          value = _this$props2.value;\n\n      return autoSuccess && (percent >= 100 || value >= total);\n    }, _this.renderLabel = function () {\n      var _this$props3 = _this.props,\n          children = _this$props3.children,\n          content = _this$props3.content,\n          label = _this$props3.label;\n\n      if (!_lib.childrenUtils.isNil(children)) return _react2.default.createElement('div', { className: 'label' }, children);\n      if (!_lib.childrenUtils.isNil(content)) return _react2.default.createElement('div', { className: 'label' }, content);\n      return (0, _lib.createHTMLDivision)(label, { defaultProps: { className: 'label' } });\n    }, _this.renderProgress = function (percent) {\n      var _this$props4 = _this.props,\n          precision = _this$props4.precision,\n          progress = _this$props4.progress,\n          total = _this$props4.total,\n          value = _this$props4.value;\n\n      if (!progress && (0, _isUndefined3.default)(precision)) return;\n      return _react2.default.createElement('div', { className: 'progress' }, progress !== 'ratio' ? percent + '%' : value + '/' + total);\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  (0, _createClass3.default)(Progress, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          active = _props.active,\n          attached = _props.attached,\n          className = _props.className,\n          color = _props.color,\n          disabled = _props.disabled,\n          error = _props.error,\n          indicating = _props.indicating,\n          inverted = _props.inverted,\n          size = _props.size,\n          success = _props.success,\n          warning = _props.warning;\n\n      var classes = (0, _classnames2.default)('ui', color, size, (0, _lib.useKeyOnly)(active || indicating, 'active'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(error, 'error'), (0, _lib.useKeyOnly)(indicating, 'indicating'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(success || this.isAutoSuccess(), 'success'), (0, _lib.useKeyOnly)(warning, 'warning'), (0, _lib.useValueAndKey)(attached, 'attached'), 'progress', className);\n      var rest = (0, _lib.getUnhandledProps)(Progress, this.props);\n      var ElementType = (0, _lib.getElementType)(Progress, this.props);\n      var percent = this.getPercent();\n\n      return _react2.default.createElement(ElementType, (0, _extends3.default)({}, rest, { className: classes, 'data-percent': Math.floor(percent) }), _react2.default.createElement('div', { className: 'bar', style: { width: percent + '%' } }, this.renderProgress(percent)), this.renderLabel());\n    }\n  }]);\n  return Progress;\n}(_react.Component);\n\nProgress._meta = {\n  name: 'Progress',\n  type: _lib.META.TYPES.MODULE\n};\nProgress.handledProps = ['active', 'as', 'attached', 'autoSuccess', 'children', 'className', 'color', 'content', 'disabled', 'error', 'indicating', 'inverted', 'label', 'percent', 'precision', 'progress', 'size', 'success', 'total', 'value', 'warning'];\nProgress.propTypes = \"development\" !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: _lib.customPropTypes.as,\n\n  /** A progress bar can show activity. */\n  active: _propTypes2.default.bool,\n\n  /** A progress bar can attach to and show the progress of an element (i.e. Card or Segment). */\n  attached: _propTypes2.default.oneOf(['top', 'bottom']),\n\n  /** Whether success state should automatically trigger when progress completes. */\n  autoSuccess: _propTypes2.default.bool,\n\n  /** Primary content. */\n  children: _propTypes2.default.node,\n\n  /** Additional classes. */\n  className: _propTypes2.default.string,\n\n  /** A progress bar can have different colors. */\n  color: _propTypes2.default.oneOf(_lib.SUI.COLORS),\n\n  /** Shorthand for primary content. */\n  content: _lib.customPropTypes.contentShorthand,\n\n  /** A progress bar be disabled. */\n  disabled: _propTypes2.default.bool,\n\n  /** A progress bar can show a error state. */\n  error: _propTypes2.default.bool,\n\n  /** An indicating progress bar visually indicates the current level of progress of a task. */\n  indicating: _propTypes2.default.bool,\n\n  /** A progress bar can have its colors inverted. */\n  inverted: _propTypes2.default.bool,\n\n  /** Can be set to either to display progress as percent or ratio. */\n  label: _lib.customPropTypes.itemShorthand,\n\n  /** Current percent complete. */\n  percent: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['total', 'value']), _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])]),\n\n  /** Decimal point precision for calculated progress. */\n  precision: _propTypes2.default.number,\n\n  /** A progress bar can contain a text value indicating current progress. */\n  progress: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.oneOf(['percent', 'ratio'])]),\n\n  /** A progress bar can vary in size. */\n  size: _propTypes2.default.oneOf((0, _without3.default)(_lib.SUI.SIZES, 'mini', 'huge', 'massive')),\n\n  /** A progress bar can show a success state. */\n  success: _propTypes2.default.bool,\n\n  /** For use with value. Together, these will calculate the percent. Mutually excludes percent. */\n  total: _lib.customPropTypes.every([_lib.customPropTypes.demand(['value']), _lib.customPropTypes.disallow(['percent']), _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])]),\n\n  /** For use with total. Together, these will calculate the percent. Mutually excludes percent. */\n  value: _lib.customPropTypes.every([_lib.customPropTypes.demand(['total']), _lib.customPropTypes.disallow(['percent']), _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])]),\n\n  /** A progress bar can show a warning state. */\n  warning: _propTypes2.default.bool\n} : {};\nexports.default = Progress;"},"hash":"1f729b9fda9db0b4e04ac41fc8f22c91"}