{"dependencies":[{"name":"babel-runtime/helpers/extends","loc":{"line":7,"column":24}},{"name":"lodash/without","loc":{"line":11,"column":24}},{"name":"classnames","loc":{"line":15,"column":26}},{"name":"prop-types","loc":{"line":19,"column":25}},{"name":"react","loc":{"line":23,"column":21}},{"name":"../../lib","loc":{"line":27,"column":19}},{"name":"../../elements/Icon","loc":{"line":29,"column":20}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _without2 = require('lodash/without');\n\nvar _without3 = _interopRequireDefault(_without2);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lib = require('../../lib');\n\nvar _Icon = require('../../elements/Icon');\n\nvar _Icon2 = _interopRequireDefault(_Icon);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\n/**\n * A table row can have cells.\n */\nfunction TableCell(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      content = props.content,\n      disabled = props.disabled,\n      error = props.error,\n      icon = props.icon,\n      negative = props.negative,\n      positive = props.positive,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      warning = props.warning,\n      width = props.width;\n\n  var classes = (0, _classnames2.default)((0, _lib.useKeyOnly)(active, 'active'), (0, _lib.useKeyOnly)(collapsing, 'collapsing'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(error, 'error'), (0, _lib.useKeyOnly)(negative, 'negative'), (0, _lib.useKeyOnly)(positive, 'positive'), (0, _lib.useKeyOnly)(selectable, 'selectable'), (0, _lib.useKeyOnly)(singleLine, 'single line'), (0, _lib.useKeyOnly)(warning, 'warning'), (0, _lib.useTextAlignProp)(textAlign), (0, _lib.useVerticalAlignProp)(verticalAlign), (0, _lib.useWidthProp)(width, 'wide'), className);\n  var rest = (0, _lib.getUnhandledProps)(TableCell, props);\n  var ElementType = (0, _lib.getElementType)(TableCell, props);\n\n  if (!_lib.childrenUtils.isNil(children)) {\n    return _react2.default.createElement(ElementType, (0, _extends3.default)({}, rest, { className: classes }), children);\n  }\n\n  return _react2.default.createElement(ElementType, (0, _extends3.default)({}, rest, { className: classes }), _Icon2.default.create(icon), content);\n}\n\nTableCell.handledProps = ['active', 'as', 'children', 'className', 'collapsing', 'content', 'disabled', 'error', 'icon', 'negative', 'positive', 'selectable', 'singleLine', 'textAlign', 'verticalAlign', 'warning', 'width'];\nTableCell._meta = {\n  name: 'TableCell',\n  type: _lib.META.TYPES.COLLECTION,\n  parent: 'Table'\n};\n\nTableCell.defaultProps = {\n  as: 'td'\n};\n\nTableCell.propTypes = \"development\" !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: _lib.customPropTypes.as,\n\n  /** A cell can be active or selected by a user. */\n  active: _propTypes2.default.bool,\n\n  /** Primary content. */\n  children: _propTypes2.default.node,\n\n  /** Additional classes. */\n  className: _propTypes2.default.string,\n\n  /** A cell can be collapsing so that it only uses as much space as required. */\n  collapsing: _propTypes2.default.bool,\n\n  /** Shorthand for primary content. */\n  content: _lib.customPropTypes.contentShorthand,\n\n  /** A cell can be disabled. */\n  disabled: _propTypes2.default.bool,\n\n  /** A cell may call attention to an error or a negative value. */\n  error: _propTypes2.default.bool,\n\n  /** Add an Icon by name, props object, or pass an <Icon /> */\n  icon: _lib.customPropTypes.itemShorthand,\n\n  /** A cell may let a user know whether a value is bad. */\n  negative: _propTypes2.default.bool,\n\n  /** A cell may let a user know whether a value is good. */\n  positive: _propTypes2.default.bool,\n\n  /** A cell can be selectable. */\n  selectable: _propTypes2.default.bool,\n\n  /** A cell can specify that its contents should remain on a single line and not wrap. */\n  singleLine: _propTypes2.default.bool,\n\n  /** A table cell can adjust its text alignment. */\n  textAlign: _propTypes2.default.oneOf((0, _without3.default)(_lib.SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table cell can adjust its text alignment. */\n  verticalAlign: _propTypes2.default.oneOf(_lib.SUI.VERTICAL_ALIGNMENTS),\n\n  /** A cell may warn a user. */\n  warning: _propTypes2.default.bool,\n\n  /** A table can specify the width of individual columns independently. */\n  width: _propTypes2.default.oneOf(_lib.SUI.WIDTHS)\n} : {};\n\nTableCell.create = (0, _lib.createShorthandFactory)(TableCell, function (content) {\n  return { content: content };\n});\n\nexports.default = TableCell;"},"hash":"01c278db8e9a2176f8f292486f3ff2bb"}