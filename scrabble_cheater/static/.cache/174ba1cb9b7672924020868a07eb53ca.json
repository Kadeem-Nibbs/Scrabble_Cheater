{"dependencies":[{"name":"babel-runtime/helpers/extends","loc":{"line":7,"column":24}},{"name":"lodash/get","loc":{"line":11,"column":20}},{"name":"lodash/isNil","loc":{"line":15,"column":22}},{"name":"classnames","loc":{"line":19,"column":26}},{"name":"prop-types","loc":{"line":23,"column":25}},{"name":"react","loc":{"line":27,"column":21}},{"name":"../../lib","loc":{"line":31,"column":19}},{"name":"../../modules/Checkbox","loc":{"line":33,"column":24}},{"name":"../../addons/Radio","loc":{"line":37,"column":21}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _isNil2 = require('lodash/isNil');\n\nvar _isNil3 = _interopRequireDefault(_isNil2);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lib = require('../../lib');\n\nvar _Checkbox = require('../../modules/Checkbox');\n\nvar _Checkbox2 = _interopRequireDefault(_Checkbox);\n\nvar _Radio = require('../../addons/Radio');\n\nvar _Radio2 = _interopRequireDefault(_Radio);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\n/**\n * A field is a form element containing a label and an input.\n * @see Form\n * @see Button\n * @see Checkbox\n * @see Dropdown\n * @see Input\n * @see Radio\n * @see Select\n * @see Visibility\n */\nfunction FormField(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      control = props.control,\n      disabled = props.disabled,\n      error = props.error,\n      inline = props.inline,\n      label = props.label,\n      required = props.required,\n      type = props.type,\n      width = props.width;\n\n  var classes = (0, _classnames2.default)((0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(error, 'error'), (0, _lib.useKeyOnly)(inline, 'inline'), (0, _lib.useKeyOnly)(required, 'required'), (0, _lib.useWidthProp)(width, 'wide'), 'field', className);\n  var rest = (0, _lib.getUnhandledProps)(FormField, props);\n  var ElementType = (0, _lib.getElementType)(FormField, props);\n\n  // ----------------------------------------\n  // No Control\n  // ----------------------------------------\n\n  if ((0, _isNil3.default)(control)) {\n    if ((0, _isNil3.default)(label)) {\n      return _react2.default.createElement(ElementType, (0, _extends3.default)({}, rest, { className: classes }), _lib.childrenUtils.isNil(children) ? content : children);\n    }\n\n    return _react2.default.createElement(ElementType, (0, _extends3.default)({}, rest, { className: classes }), (0, _lib.createHTMLLabel)(label));\n  }\n\n  // ----------------------------------------\n  // Checkbox/Radio Control\n  // ----------------------------------------\n  var controlProps = (0, _extends3.default)({}, rest, { content: content, children: children, disabled: disabled, required: required, type: type\n\n    // wrap HTML checkboxes/radios in the label\n  });if (control === 'input' && (type === 'checkbox' || type === 'radio')) {\n    return _react2.default.createElement(ElementType, { className: classes }, _react2.default.createElement('label', null, (0, _react.createElement)(control, controlProps), ' ', label));\n  }\n\n  // pass label prop to controls that support it\n  if (control === _Checkbox2.default || control === _Radio2.default) {\n    return _react2.default.createElement(ElementType, { className: classes }, (0, _react.createElement)(control, (0, _extends3.default)({}, controlProps, { label: label })));\n  }\n\n  // ----------------------------------------\n  // Other Control\n  // ----------------------------------------\n\n  return _react2.default.createElement(ElementType, { className: classes }, (0, _lib.createHTMLLabel)(label, { defaultProps: {\n      htmlFor: (0, _get3.default)(controlProps, 'id') }\n  }), (0, _react.createElement)(control, controlProps));\n}\n\nFormField.handledProps = ['as', 'children', 'className', 'content', 'control', 'disabled', 'error', 'inline', 'label', 'required', 'type', 'width'];\nFormField._meta = {\n  name: 'FormField',\n  parent: 'Form',\n  type: _lib.META.TYPES.COLLECTION\n};\n\nFormField.propTypes = \"development\" !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: _lib.customPropTypes.as,\n\n  /** Primary content. */\n  children: _propTypes2.default.node,\n\n  /** Additional classes. */\n  className: _propTypes2.default.string,\n\n  /** Shorthand for primary content. */\n  content: _lib.customPropTypes.contentShorthand,\n\n  /**\n   * A form control component (i.e. Dropdown) or HTML tagName (i.e. 'input').\n   * Extra FormField props are passed to the control component.\n   * Mutually exclusive with children.\n   */\n  control: _lib.customPropTypes.some([_propTypes2.default.func, _propTypes2.default.oneOf(['button', 'input', 'select', 'textarea'])]),\n\n  /** Individual fields may be disabled. */\n  disabled: _propTypes2.default.bool,\n\n  /** Individual fields may display an error state. */\n  error: _propTypes2.default.bool,\n\n  /** A field can have its label next to instead of above it. */\n  inline: _propTypes2.default.bool,\n\n  // Heads Up!\n  // Do not disallow children with `label` shorthand\n  // The `control` might accept a `label` prop and `children`\n  /** Mutually exclusive with children. */\n  label: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.object]),\n\n  /** A field can show that input is mandatory. */\n  required: _propTypes2.default.bool,\n\n  /** Passed to the control component (i.e. <input type='password' />) */\n  type: _lib.customPropTypes.every([_lib.customPropTypes.demand(['control'])]\n  // don't strictly validate HTML types\n  // a control might be passed that uses a `type` prop with unknown values\n  // let the control validate if for us\n  ),\n\n  /** A field can specify its width in grid columns */\n  width: _propTypes2.default.oneOf(_lib.SUI.WIDTHS)\n} : {};\n\nexports.default = FormField;"},"hash":"8bdcba290508628c7f3ac6aa08a17052"}