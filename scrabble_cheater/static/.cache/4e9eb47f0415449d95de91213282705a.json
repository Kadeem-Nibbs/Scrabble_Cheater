{"dependencies":[{"name":"./_baseIsEqual","loc":{"line":1,"column":26}},{"name":"./get","loc":{"line":2,"column":18}},{"name":"./hasIn","loc":{"line":3,"column":20}},{"name":"./_isKey","loc":{"line":4,"column":20}},{"name":"./_isStrictComparable","loc":{"line":5,"column":33}},{"name":"./_matchesStrictComparable","loc":{"line":6,"column":38}},{"name":"./_toKey","loc":{"line":7,"column":20}}],"generated":{"js":"var baseIsEqual = require('./_baseIsEqual'),\n    get = require('./get'),\n    hasIn = require('./hasIn'),\n    isKey = require('./_isKey'),\n    isStrictComparable = require('./_isStrictComparable'),\n    matchesStrictComparable = require('./_matchesStrictComparable'),\n    toKey = require('./_toKey');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n"},"hash":"22975ddb63b2b28df0acbe887b702b4b"}