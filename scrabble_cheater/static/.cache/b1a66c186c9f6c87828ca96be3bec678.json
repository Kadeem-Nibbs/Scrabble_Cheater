{"dependencies":[{"name":"babel-runtime/helpers/toConsumableArray","loc":{"line":8,"column":34}},{"name":"lodash/fp/difference","loc":{"line":12,"column":27}},{"name":"lodash/fp/trim","loc":{"line":16,"column":21}},{"name":"lodash/fp/isObject","loc":{"line":20,"column":25}},{"name":"lodash/fp/pick","loc":{"line":24,"column":21}},{"name":"lodash/fp/keys","loc":{"line":28,"column":21}},{"name":"lodash/fp/isPlainObject","loc":{"line":32,"column":30}},{"name":"lodash/fp/isFunction","loc":{"line":36,"column":27}},{"name":"lodash/fp/compact","loc":{"line":40,"column":24}},{"name":"lodash/fp/isNil","loc":{"line":44,"column":22}},{"name":"lodash/fp/take","loc":{"line":48,"column":21}},{"name":"lodash/fp/sortBy","loc":{"line":52,"column":23}},{"name":"lodash/fp/sum","loc":{"line":56,"column":20}},{"name":"lodash/fp/min","loc":{"line":60,"column":20}},{"name":"lodash/fp/map","loc":{"line":64,"column":20}},{"name":"lodash/fp/flow","loc":{"line":68,"column":21}},{"name":"lodash/fp/memoize","loc":{"line":72,"column":24}},{"name":"prop-types","loc":{"line":76,"column":25}},{"name":"./leven","loc":{"line":80,"column":21}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deprecate = exports.collectionShorthand = exports.itemShorthand = exports.contentShorthand = exports.multipleProp = exports.demand = exports.givenProps = exports.some = exports.every = exports.disallow = exports.suggest = exports.as = undefined;\n\nvar _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _difference2 = require('lodash/fp/difference');\n\nvar _difference3 = _interopRequireDefault(_difference2);\n\nvar _trim2 = require('lodash/fp/trim');\n\nvar _trim3 = _interopRequireDefault(_trim2);\n\nvar _isObject2 = require('lodash/fp/isObject');\n\nvar _isObject3 = _interopRequireDefault(_isObject2);\n\nvar _pick2 = require('lodash/fp/pick');\n\nvar _pick3 = _interopRequireDefault(_pick2);\n\nvar _keys2 = require('lodash/fp/keys');\n\nvar _keys3 = _interopRequireDefault(_keys2);\n\nvar _isPlainObject2 = require('lodash/fp/isPlainObject');\n\nvar _isPlainObject3 = _interopRequireDefault(_isPlainObject2);\n\nvar _isFunction2 = require('lodash/fp/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _compact2 = require('lodash/fp/compact');\n\nvar _compact3 = _interopRequireDefault(_compact2);\n\nvar _isNil2 = require('lodash/fp/isNil');\n\nvar _isNil3 = _interopRequireDefault(_isNil2);\n\nvar _take2 = require('lodash/fp/take');\n\nvar _take3 = _interopRequireDefault(_take2);\n\nvar _sortBy2 = require('lodash/fp/sortBy');\n\nvar _sortBy3 = _interopRequireDefault(_sortBy2);\n\nvar _sum2 = require('lodash/fp/sum');\n\nvar _sum3 = _interopRequireDefault(_sum2);\n\nvar _min2 = require('lodash/fp/min');\n\nvar _min3 = _interopRequireDefault(_min2);\n\nvar _map2 = require('lodash/fp/map');\n\nvar _map3 = _interopRequireDefault(_map2);\n\nvar _flow2 = require('lodash/fp/flow');\n\nvar _flow3 = _interopRequireDefault(_flow2);\n\nvar _memoize2 = require('lodash/fp/memoize');\n\nvar _memoize3 = _interopRequireDefault(_memoize2);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _leven = require('./leven');\n\nvar _leven2 = _interopRequireDefault(_leven);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar typeOf = function typeOf() {\n  var _Object$prototype$toS;\n\n  return (_Object$prototype$toS = Object.prototype.toString).call.apply(_Object$prototype$toS, arguments);\n};\n\n/**\n * Ensure a component can render as a give prop value.\n */\nvar as = exports.as = function as() {\n  return _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).apply(undefined, arguments);\n};\n\n/**\n * Similar to PropTypes.oneOf but shows closest matches.\n * Word order is ignored allowing `left chevron` to match `chevron left`.\n * Useful for very large lists of options (e.g. Icon name, Flag name, etc.)\n * @param {string[]} suggestions An array of allowed values.\n */\nvar suggest = exports.suggest = function suggest(suggestions) {\n  if (!Array.isArray(suggestions)) {\n    throw new Error('Invalid argument supplied to suggest, expected an instance of array.');\n  }\n\n  /* eslint-disable max-nested-callbacks */\n  var findBestSuggestions = (0, _memoize3.default)(function (str) {\n    var propValueWords = str.split(' ');\n\n    return (0, _flow3.default)((0, _map3.default)(function (suggestion) {\n      var suggestionWords = suggestion.split(' ');\n\n      var propValueScore = (0, _flow3.default)((0, _map3.default)(function (x) {\n        return (0, _map3.default)(function (y) {\n          return (0, _leven2.default)(x, y);\n        }, suggestionWords);\n      }), (0, _map3.default)(_min3.default), _sum3.default)(propValueWords);\n\n      var suggestionScore = (0, _flow3.default)((0, _map3.default)(function (x) {\n        return (0, _map3.default)(function (y) {\n          return (0, _leven2.default)(x, y);\n        }, propValueWords);\n      }), (0, _map3.default)(_min3.default), _sum3.default)(suggestionWords);\n\n      return { suggestion: suggestion, score: propValueScore + suggestionScore };\n    }), (0, _sortBy3.default)(['score', 'suggestion']), (0, _take3.default)(3))(suggestions);\n  });\n  /* eslint-enable max-nested-callbacks */\n\n  // Convert the suggestions list into a hash map for O(n) lookup times. Ensure\n  // the words in each key are sorted alphabetically so that we have a consistent\n  // way of looking up a value in the map, i.e. we can sort the words in the\n  // incoming propValue and look that up without having to check all permutations.\n  var suggestionsLookup = suggestions.reduce(function (acc, key) {\n    acc[key.split(' ').sort().join(' ')] = true;\n    return acc;\n  }, {});\n\n  return function (props, propName, componentName) {\n    var propValue = props[propName];\n\n    // skip if prop is undefined or is included in the suggestions\n    if (!propValue || suggestionsLookup[propValue]) return;\n\n    // check if the words were correct but ordered differently.\n    // Since we're matching for classNames we need to allow any word order\n    // to pass validation, e.g. `left chevron` vs `chevron left`.\n    var propValueSorted = propValue.split(' ').sort().join(' ');\n    if (suggestionsLookup[propValueSorted]) return;\n\n    // find best suggestions\n    var bestMatches = findBestSuggestions(propValue);\n\n    // skip if a match scored 0\n    if (bestMatches.some(function (x) {\n      return x.score === 0;\n    })) return;\n\n    return new Error(['Invalid prop `' + propName + '` of value `' + propValue + '` supplied to `' + componentName + '`.', '\\n\\nInstead of `' + propValue + '`, did you mean:', bestMatches.map(function (x) {\n      return '\\n  - ' + x.suggestion;\n    }).join(''), '\\n'].join(''));\n  };\n};\n\n/**\n * Disallow other props from being defined with this prop.\n * @param {string[]} disallowedProps An array of props that cannot be used with this prop.\n */\nvar disallow = exports.disallow = function disallow(disallowedProps) {\n  return function (props, propName, componentName) {\n    if (!Array.isArray(disallowedProps)) {\n      throw new Error(['Invalid argument supplied to disallow, expected an instance of array.', ' See `' + propName + '` prop in `' + componentName + '`.'].join(''));\n    }\n\n    // skip if prop is undefined\n    if ((0, _isNil3.default)(props[propName]) || props[propName] === false) return;\n\n    // find disallowed props with values\n    var disallowed = disallowedProps.reduce(function (acc, disallowedProp) {\n      if (!(0, _isNil3.default)(props[disallowedProp]) && props[disallowedProp] !== false) {\n        return [].concat((0, _toConsumableArray3.default)(acc), [disallowedProp]);\n      }\n      return acc;\n    }, []);\n\n    if (disallowed.length > 0) {\n      return new Error(['Prop `' + propName + '` in `' + componentName + '` conflicts with props: `' + disallowed.join('`, `') + '`.', 'They cannot be defined together, choose one or the other.'].join(' '));\n    }\n  };\n};\n\n/**\n * Ensure a prop adherers to multiple prop type validators.\n * @param {function[]} validators An array of propType functions.\n */\nvar every = exports.every = function every(validators) {\n  return function (props, propName, componentName) {\n    for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      rest[_key - 3] = arguments[_key];\n    }\n\n    if (!Array.isArray(validators)) {\n      throw new Error(['Invalid argument supplied to every, expected an instance of array.', 'See `' + propName + '` prop in `' + componentName + '`.'].join(' '));\n    }\n\n    var errors = (0, _flow3.default)((0, _map3.default)(function (validator) {\n      if (typeof validator !== 'function') {\n        throw new Error('every() argument \"validators\" should contain functions, found: ' + typeOf(validator) + '.');\n      }\n      return validator.apply(undefined, [props, propName, componentName].concat(rest));\n    }), _compact3.default)(validators);\n\n    // we can only return one error at a time\n    return errors[0];\n  };\n};\n\n/**\n * Ensure a prop adherers to at least one of the given prop type validators.\n * @param {function[]} validators An array of propType functions.\n */\nvar some = exports.some = function some(validators) {\n  return function (props, propName, componentName) {\n    for (var _len2 = arguments.length, rest = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n      rest[_key2 - 3] = arguments[_key2];\n    }\n\n    if (!Array.isArray(validators)) {\n      throw new Error(['Invalid argument supplied to some, expected an instance of array.', 'See `' + propName + '` prop in `' + componentName + '`.'].join(' '));\n    }\n\n    var errors = (0, _compact3.default)((0, _map3.default)(validators, function (validator) {\n      if (!(0, _isFunction3.default)(validator)) {\n        throw new Error('some() argument \"validators\" should contain functions, found: ' + typeOf(validator) + '.');\n      }\n      return validator.apply(undefined, [props, propName, componentName].concat(rest));\n    }));\n\n    // fail only if all validators failed\n    if (errors.length === validators.length) {\n      var error = new Error('One of these validators must pass:');\n      error.message += '\\n' + (0, _map3.default)(errors, function (err, i) {\n        return '[' + (i + 1) + ']: ' + err.message;\n      }).join('\\n');\n      return error;\n    }\n  };\n};\n\n/**\n * Ensure a validator passes only when a component has a given propsShape.\n * @param {object} propsShape An object describing the prop shape.\n * @param {function} validator A propType function.\n */\nvar givenProps = exports.givenProps = function givenProps(propsShape, validator) {\n  return function (props, propName, componentName) {\n    for (var _len3 = arguments.length, rest = Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n      rest[_key3 - 3] = arguments[_key3];\n    }\n\n    if (!(0, _isPlainObject3.default)(propsShape)) {\n      throw new Error(['Invalid argument supplied to givenProps, expected an object.', 'See `' + propName + '` prop in `' + componentName + '`.'].join(' '));\n    }\n\n    if (typeof validator !== 'function') {\n      throw new Error(['Invalid argument supplied to givenProps, expected a function.', 'See `' + propName + '` prop in `' + componentName + '`.'].join(' '));\n    }\n\n    var shouldValidate = (0, _keys3.default)(propsShape).every(function (key) {\n      var val = propsShape[key];\n      // require propShape validators to pass or prop values to match\n      return typeof val === 'function' ? !val.apply(undefined, [props, key, componentName].concat(rest)) : val === props[propName];\n    });\n\n    if (!shouldValidate) return;\n\n    var error = validator.apply(undefined, [props, propName, componentName].concat(rest));\n\n    if (error) {\n      // poor mans shallow pretty print, prevents JSON circular reference errors\n      var prettyProps = '{ ' + (0, _keys3.default)((0, _pick3.default)((0, _keys3.default)(propsShape), props)).map(function (key) {\n        var val = props[key];\n        var renderedValue = val;\n        if (typeof val === 'string') renderedValue = '\"' + val + '\"';else if (Array.isArray(val)) renderedValue = '[' + val.join(', ') + ']';else if ((0, _isObject3.default)(val)) renderedValue = '{...}';\n\n        return key + ': ' + renderedValue;\n      }).join(', ') + ' }';\n\n      error.message = 'Given props ' + prettyProps + ': ' + error.message;\n      return error;\n    }\n  };\n};\n\n/**\n * Define prop dependencies by requiring other props.\n * @param {string[]} requiredProps An array of required prop names.\n */\nvar demand = exports.demand = function demand(requiredProps) {\n  return function (props, propName, componentName) {\n    if (!Array.isArray(requiredProps)) {\n      throw new Error(['Invalid `requiredProps` argument supplied to require, expected an instance of array.', ' See `' + propName + '` prop in `' + componentName + '`.'].join(''));\n    }\n\n    // skip if prop is undefined\n    if (props[propName] === undefined) return;\n\n    var missingRequired = requiredProps.filter(function (requiredProp) {\n      return props[requiredProp] === undefined;\n    });\n    if (missingRequired.length > 0) {\n      return new Error('`' + propName + '` prop in `' + componentName + '` requires props: `' + missingRequired.join('`, `') + '`.');\n    }\n  };\n};\n\n/**\n * Ensure an multiple prop contains a string with only possible values.\n * @param {string[]} possible An array of possible values to prop.\n */\nvar multipleProp = exports.multipleProp = function multipleProp(possible) {\n  return function (props, propName, componentName) {\n    if (!Array.isArray(possible)) {\n      throw new Error(['Invalid argument supplied to some, expected an instance of array.', 'See `' + propName + '` prop in `' + componentName + '`.'].join(' '));\n    }\n\n    var propValue = props[propName];\n\n    // skip if prop is undefined\n    if ((0, _isNil3.default)(propValue) || propValue === false) return;\n\n    var values = propValue.replace('large screen', 'large-screen').replace(/ vertically/g, '-vertically').split(' ').map(function (val) {\n      return (0, _trim3.default)(val).replace('-', ' ');\n    });\n    var invalid = (0, _difference3.default)(values, possible);\n\n    // fail only if there are invalid values\n    if (invalid.length > 0) {\n      return new Error('`' + propName + '` prop in `' + componentName + '` has invalid values: `' + invalid.join('`, `') + '`.');\n    }\n  };\n};\n\n/**\n * Ensure a component can render as a node passed as a prop value in place of children.\n */\nvar contentShorthand = exports.contentShorthand = function contentShorthand() {\n  return every([disallow(['children']), _propTypes2.default.node]).apply(undefined, arguments);\n};\n\n/**\n * Item shorthand is a description of a component that can be a literal,\n * a props object, or an element.\n */\nvar itemShorthand = exports.itemShorthand = function itemShorthand() {\n  return every([disallow(['children']), _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.object, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.object]))])]).apply(undefined, arguments);\n};\n\n/**\n * Collection shorthand ensures a prop is an array of item shorthand.\n */\nvar collectionShorthand = exports.collectionShorthand = function collectionShorthand() {\n  return every([disallow(['children']), _propTypes2.default.arrayOf(itemShorthand)]).apply(undefined, arguments);\n};\n\n/**\n * Show a deprecated warning for component props with a help message and optional validator.\n * @param {string} help A help message to display with the deprecation warning.\n * @param {function} [validator] A propType function.\n */\nvar deprecate = exports.deprecate = function deprecate(help, validator) {\n  return function (props, propName, componentName) {\n    for (var _len4 = arguments.length, args = Array(_len4 > 3 ? _len4 - 3 : 0), _key4 = 3; _key4 < _len4; _key4++) {\n      args[_key4 - 3] = arguments[_key4];\n    }\n\n    if (typeof help !== 'string') {\n      throw new Error(['Invalid `help` argument supplied to deprecate, expected a string.', 'See `' + propName + '` prop in `' + componentName + '`.'].join(' '));\n    }\n\n    // skip if prop is undefined\n    if (props[propName] === undefined) return;\n\n    // deprecation error and help\n    var error = new Error('The `' + propName + '` prop in `' + componentName + '` is deprecated.');\n    if (help) error.message += ' ' + help;\n\n    // add optional validation error message\n    if (validator) {\n      if (typeof validator === 'function') {\n        var validationError = validator.apply(undefined, [props, propName, componentName].concat(args));\n        if (validationError) {\n          error.message = error.message + ' ' + validationError.message;\n        }\n      } else {\n        throw new Error(['Invalid argument supplied to deprecate, expected a function.', 'See `' + propName + '` prop in `' + componentName + '`.'].join(' '));\n      }\n    }\n\n    return error;\n  };\n};"},"hash":"5a505b6e5998e216a5fcd1a046f536ac"}