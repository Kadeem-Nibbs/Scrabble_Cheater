{"dependencies":[{"name":"babel-runtime/helpers/extends","loc":{"line":7,"column":24}},{"name":"classnames","loc":{"line":11,"column":26}},{"name":"prop-types","loc":{"line":15,"column":25}},{"name":"react","loc":{"line":19,"column":21}},{"name":"../../lib","loc":{"line":23,"column":19}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lib = require('../../lib');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\n/**\n * Buttons can be grouped.\n */\nfunction ButtonGroup(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      compact = props.compact,\n      content = props.content,\n      floated = props.floated,\n      fluid = props.fluid,\n      icon = props.icon,\n      inverted = props.inverted,\n      labeled = props.labeled,\n      negative = props.negative,\n      positive = props.positive,\n      primary = props.primary,\n      secondary = props.secondary,\n      size = props.size,\n      toggle = props.toggle,\n      vertical = props.vertical,\n      widths = props.widths;\n\n  var classes = (0, _classnames2.default)('ui', color, size, (0, _lib.useKeyOnly)(basic, 'basic'), (0, _lib.useKeyOnly)(compact, 'compact'), (0, _lib.useKeyOnly)(fluid, 'fluid'), (0, _lib.useKeyOnly)(icon, 'icon'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(labeled, 'labeled'), (0, _lib.useKeyOnly)(negative, 'negative'), (0, _lib.useKeyOnly)(positive, 'positive'), (0, _lib.useKeyOnly)(primary, 'primary'), (0, _lib.useKeyOnly)(secondary, 'secondary'), (0, _lib.useKeyOnly)(toggle, 'toggle'), (0, _lib.useKeyOnly)(vertical, 'vertical'), (0, _lib.useKeyOrValueAndKey)(attached, 'attached'), (0, _lib.useValueAndKey)(floated, 'floated'), (0, _lib.useWidthProp)(widths), 'buttons', className);\n  var rest = (0, _lib.getUnhandledProps)(ButtonGroup, props);\n  var ElementType = (0, _lib.getElementType)(ButtonGroup, props);\n\n  return _react2.default.createElement(ElementType, (0, _extends3.default)({}, rest, { className: classes }), _lib.childrenUtils.isNil(children) ? content : children);\n}\n\nButtonGroup.handledProps = ['as', 'attached', 'basic', 'children', 'className', 'color', 'compact', 'content', 'floated', 'fluid', 'icon', 'inverted', 'labeled', 'negative', 'positive', 'primary', 'secondary', 'size', 'toggle', 'vertical', 'widths'];\nButtonGroup._meta = {\n  name: 'ButtonGroup',\n  parent: 'Button',\n  type: _lib.META.TYPES.ELEMENT\n};\n\nButtonGroup.propTypes = \"development\" !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: _lib.customPropTypes.as,\n\n  /** Groups can be attached to other content. */\n  attached: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.oneOf(['left', 'right', 'top', 'bottom'])]),\n\n  /** Groups can be less pronounced. */\n  basic: _propTypes2.default.bool,\n\n  /** Primary content. */\n  children: _propTypes2.default.node,\n\n  /** Additional classes. */\n  className: _propTypes2.default.string,\n\n  /** Groups can have a shared color. */\n  color: _propTypes2.default.oneOf(_lib.SUI.COLORS),\n\n  /** Groups can reduce their padding to fit into tighter spaces. */\n  compact: _propTypes2.default.bool,\n\n  /** Shorthand for primary content. */\n  content: _lib.customPropTypes.contentShorthand,\n\n  /** Groups can be aligned to the left or right of its container. */\n  floated: _propTypes2.default.oneOf(_lib.SUI.FLOATS),\n\n  /** Groups can take the width of their container. */\n  fluid: _propTypes2.default.bool,\n\n  /** Groups can be formatted as icons. */\n  icon: _propTypes2.default.bool,\n\n  /** Groups can be formatted to appear on dark backgrounds. */\n  inverted: _propTypes2.default.bool,\n\n  /** Groups can be formatted as labeled icon buttons. */\n  labeled: _propTypes2.default.bool,\n\n  /** Groups can hint towards a negative consequence. */\n  negative: _propTypes2.default.bool,\n\n  /** Groups can hint towards a positive consequence. */\n  positive: _propTypes2.default.bool,\n\n  /** Groups can be formatted to show different levels of emphasis. */\n  primary: _propTypes2.default.bool,\n\n  /** Groups can be formatted to show different levels of emphasis. */\n  secondary: _propTypes2.default.bool,\n\n  /** Groups can have different sizes. */\n  size: _propTypes2.default.oneOf(_lib.SUI.SIZES),\n\n  /** Groups can be formatted to toggle on and off. */\n  toggle: _propTypes2.default.bool,\n\n  /** Groups can be formatted to appear vertically. */\n  vertical: _propTypes2.default.bool,\n\n  /** Groups can have their widths divided evenly. */\n  widths: _propTypes2.default.oneOf(_lib.SUI.WIDTHS)\n} : {};\n\nexports.default = ButtonGroup;"},"hash":"b9fe6c6539a491f5ff62bdb64c5ddcf1"}