{"dependencies":[{"name":"./_listCacheClear","loc":{"line":1,"column":29}},{"name":"./_listCacheDelete","loc":{"line":2,"column":30}},{"name":"./_listCacheGet","loc":{"line":3,"column":27}},{"name":"./_listCacheHas","loc":{"line":4,"column":27}},{"name":"./_listCacheSet","loc":{"line":5,"column":27}}],"generated":{"js":"var listCacheClear = require('./_listCacheClear'),\n    listCacheDelete = require('./_listCacheDelete'),\n    listCacheGet = require('./_listCacheGet'),\n    listCacheHas = require('./_listCacheHas'),\n    listCacheSet = require('./_listCacheSet');\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n"},"hash":"8a3abd4c57f82f8764440ff6b34bd99c"}