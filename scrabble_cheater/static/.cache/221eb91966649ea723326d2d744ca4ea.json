{"dependencies":[{"name":"react","loc":{"line":1,"column":33}},{"name":"classnames","loc":{"line":2,"column":23}},{"name":"semantic-ui-react","loc":{"line":4,"column":36}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _classnames = require(\"classnames\");\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _semanticUiReact = require(\"semantic-ui-react\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass WordList extends _react.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCoordinatesToHighlight = wordInfo => {\n      const startOfWord = wordInfo[1][0];\n      const endOfWord = wordInfo[1][1];\n      const wordArray = wordInfo[2];\n\n      const horizontal = startOfWord[0] === endOfWord[0];\n\n      let coordinates = [];\n      if (horizontal) {\n        const wordLength = endOfWord[1] - startOfWord[1];\n        const y = startOfWord[0];\n        let xCoordinate = startOfWord[1];\n\n        for (let i = 0; i <= wordLength; i++) {\n          coordinates.push({\n            x: xCoordinate++,\n            y: y,\n            char: wordArray[i]\n          });\n        }\n      } else {\n        const wordLength = endOfWord[0] - startOfWord[0];\n        const x = startOfWord[1];\n        let yCoordinate = startOfWord[0];\n\n        for (let i = 0; i <= wordLength; i++) {\n          coordinates.push({\n            x: x,\n            y: yCoordinate++,\n            char: wordArray[i]\n          });\n        }\n      }\n\n      return coordinates;\n    };\n\n    this.handleWordOver = (wordInfo, i) => {\n      // y x coordinates \n      const coordinatesToHighlight = this.getCoordinatesToHighlight(wordInfo);\n\n      let wordHoveredKey = i;\n\n      // need to pass this up on props\n      this.props.handleHighlightWordOnHover(coordinatesToHighlight, wordHoveredKey);\n    };\n\n    this.handleWordOut = () => {\n      this.props.handleHighlightWordOnHover([], null);\n    };\n\n    this.handleAddWordToTable = (wordInfo, i) => {\n      this.props.addWordToTable(wordInfo, i);\n      this.handleWordOut(); // un-highlight word added\n    };\n\n    this.buildList = () => {\n      const wordList = [];\n      this.props.words.forEach((wordInfo, i) => {\n        const word = wordInfo[0];\n        const points = wordInfo[3];\n\n        wordList.push(_react2.default.createElement(\n          _semanticUiReact.Menu.Item,\n          {\n            className: (0, _classnames2.default)({ 'active': this.props.wordHoveredKey === i }),\n            key: i,\n            onMouseEnter: this.handleWordOver.bind(this, wordInfo, i),\n            onMouseDown: this.handleWordOver.bind(this, wordInfo, i)\n          },\n          `${word} is worth ${points} points`,\n          _react2.default.createElement(\n            _semanticUiReact.Label,\n            {\n              onClick: this.handleAddWordToTable.bind(this, wordInfo, i),\n              onMouseEnter: this.handleWordOver.bind(this, wordInfo, i) /* todo: this is lazy and expensive: fix */\n            },\n            _react2.default.createElement(\"i\", {\n              className: \"fa fa-plus-circle\",\n              \"aria-hidden\": \"true\",\n              onMouseEnter: this.handleWordOver.bind(this, wordInfo, i) /* todo: this is lazy and expensive: fix */\n            })\n          )\n        ));\n      });\n\n      return wordList;\n    };\n\n    this.state = {\n      wordHoveredKey: null\n    };\n  }\n\n  render() {\n    if (!this.props.words) {\n      return null;\n    }\n    return _react2.default.createElement(\n      _semanticUiReact.Menu,\n      {\n        vertical: true,\n        className: \"scrollable\",\n        onMouseOut: this.handleWordOut\n      },\n      this.props.words && this.props.words.length === 0 ? // this doesn't seem right\n      _react2.default.createElement(\n        _semanticUiReact.Menu.Item,\n        null,\n        \"No possible words with this rack\"\n      ) : null,\n      this.buildList()\n    );\n  }\n}\n\nexports.default = WordList;"},"hash":"999bd5e599f3bd7f6326332643a1b1b8"}