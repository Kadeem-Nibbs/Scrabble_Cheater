{"dependencies":[{"name":"babel-runtime/helpers/slicedToArray","loc":{"line":7,"column":30}},{"name":"babel-runtime/helpers/extends","loc":{"line":11,"column":24}},{"name":"babel-runtime/helpers/classCallCheck","loc":{"line":15,"column":31}},{"name":"babel-runtime/helpers/createClass","loc":{"line":19,"column":28}},{"name":"babel-runtime/helpers/possibleConstructorReturn","loc":{"line":23,"column":42}},{"name":"babel-runtime/helpers/inherits","loc":{"line":27,"column":25}},{"name":"lodash/get","loc":{"line":31,"column":20}},{"name":"lodash/invoke","loc":{"line":35,"column":23}},{"name":"lodash/isNil","loc":{"line":39,"column":22}},{"name":"classnames","loc":{"line":43,"column":26}},{"name":"prop-types","loc":{"line":47,"column":25}},{"name":"react","loc":{"line":51,"column":21}},{"name":"../../lib","loc":{"line":55,"column":19}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _invoke2 = require('lodash/invoke');\n\nvar _invoke3 = _interopRequireDefault(_invoke2);\n\nvar _isNil2 = require('lodash/isNil');\n\nvar _isNil3 = _interopRequireDefault(_isNil2);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lib = require('../../lib');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\n/**\n * A checkbox allows a user to select a value from a small set of options, often binary.\n * @see Form\n * @see Radio\n */\nvar Checkbox = function (_Component) {\n  (0, _inherits3.default)(Checkbox, _Component);\n\n  function Checkbox() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, Checkbox);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).call.apply(_ref, [this].concat(args))), _this), _this.canToggle = function () {\n      var _this$props = _this.props,\n          disabled = _this$props.disabled,\n          radio = _this$props.radio,\n          readOnly = _this$props.readOnly;\n      var checked = _this.state.checked;\n\n      return !disabled && !readOnly && !(radio && checked);\n    }, _this.computeTabIndex = function () {\n      var _this$props2 = _this.props,\n          disabled = _this$props2.disabled,\n          tabIndex = _this$props2.tabIndex;\n\n      if (!(0, _isNil3.default)(tabIndex)) return tabIndex;\n      return disabled ? -1 : 0;\n    }, _this.handleInputRef = function (c) {\n      return _this.inputRef = c;\n    }, _this.handleClick = function (e) {\n      var _this$state = _this.state,\n          checked = _this$state.checked,\n          indeterminate = _this$state.indeterminate;\n\n      if (!_this.canToggle()) return;\n\n      (0, _invoke3.default)(_this.props, 'onClick', e, (0, _extends3.default)({}, _this.props, { checked: !checked, indeterminate: !!indeterminate }));\n      (0, _invoke3.default)(_this.props, 'onChange', e, (0, _extends3.default)({}, _this.props, { checked: !checked, indeterminate: false }));\n\n      _this.trySetState({ checked: !checked, indeterminate: false });\n    }, _this.handleMouseDown = function (e) {\n      var _this$state2 = _this.state,\n          checked = _this$state2.checked,\n          indeterminate = _this$state2.indeterminate;\n\n      (0, _invoke3.default)(_this.props, 'onMouseDown', e, (0, _extends3.default)({}, _this.props, { checked: !!checked, indeterminate: !!indeterminate }));\n      (0, _invoke3.default)(_this.inputRef, 'focus');\n\n      e.preventDefault();\n    }, _this.setIndeterminate = function () {\n      var indeterminate = _this.state.indeterminate;\n\n      if (_this.inputRef) _this.inputRef.indeterminate = !!indeterminate;\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  (0, _createClass3.default)(Checkbox, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.setIndeterminate();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.setIndeterminate();\n    }\n\n    // Note: You can't directly set the indeterminate prop on the input, so we\n    // need to maintain a ref to the input and set it manually whenever the\n    // component updates.\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          className = _props.className,\n          disabled = _props.disabled,\n          label = _props.label,\n          name = _props.name,\n          radio = _props.radio,\n          readOnly = _props.readOnly,\n          slider = _props.slider,\n          toggle = _props.toggle,\n          type = _props.type,\n          value = _props.value;\n      var _state = this.state,\n          checked = _state.checked,\n          indeterminate = _state.indeterminate;\n\n      var classes = (0, _classnames2.default)('ui', (0, _lib.useKeyOnly)(checked, 'checked'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(indeterminate, 'indeterminate'),\n      // auto apply fitted class to compact white space when there is no label\n      // https://semantic-ui.com/modules/checkbox.html#fitted\n      (0, _lib.useKeyOnly)(!label, 'fitted'), (0, _lib.useKeyOnly)(radio, 'radio'), (0, _lib.useKeyOnly)(readOnly, 'read-only'), (0, _lib.useKeyOnly)(slider, 'slider'), (0, _lib.useKeyOnly)(toggle, 'toggle'), 'checkbox', className);\n      var unhandled = (0, _lib.getUnhandledProps)(Checkbox, this.props);\n      var ElementType = (0, _lib.getElementType)(Checkbox, this.props);\n\n      var _partitionHTMLInputPr = (0, _lib.partitionHTMLInputProps)(unhandled, { htmlProps: _lib.htmlInputAttrs }),\n          _partitionHTMLInputPr2 = (0, _slicedToArray3.default)(_partitionHTMLInputPr, 2),\n          htmlInputProps = _partitionHTMLInputPr2[0],\n          rest = _partitionHTMLInputPr2[1];\n\n      var id = (0, _get3.default)(htmlInputProps, 'id');\n\n      return _react2.default.createElement(ElementType, (0, _extends3.default)({}, rest, {\n        className: classes,\n        onChange: this.handleClick,\n        onClick: this.handleClick,\n        onMouseDown: this.handleMouseDown\n      }), _react2.default.createElement('input', (0, _extends3.default)({}, htmlInputProps, {\n        checked: checked,\n        className: 'hidden',\n        name: name,\n        readOnly: true,\n        ref: this.handleInputRef,\n        tabIndex: this.computeTabIndex(),\n        type: type,\n        value: value\n      })), (0, _lib.createHTMLLabel)(label, { defaultProps: { htmlFor: id } }) || _react2.default.createElement('label', { htmlFor: id }));\n    }\n  }]);\n  return Checkbox;\n}(_lib.AutoControlledComponent);\n\nCheckbox.defaultProps = {\n  type: 'checkbox'\n};\nCheckbox.autoControlledProps = ['checked', 'indeterminate'];\nCheckbox._meta = {\n  name: 'Checkbox',\n  type: _lib.META.TYPES.MODULE\n};\nCheckbox.handledProps = ['as', 'checked', 'className', 'defaultChecked', 'defaultIndeterminate', 'disabled', 'fitted', 'indeterminate', 'label', 'name', 'onChange', 'onClick', 'onMouseDown', 'radio', 'readOnly', 'slider', 'tabIndex', 'toggle', 'type', 'value'];\nexports.default = Checkbox;\nCheckbox.propTypes = \"development\" !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: _lib.customPropTypes.as,\n\n  /** Whether or not checkbox is checked. */\n  checked: _propTypes2.default.bool,\n\n  /** Additional classes. */\n  className: _propTypes2.default.string,\n\n  /** The initial value of checked. */\n  defaultChecked: _propTypes2.default.bool,\n\n  /** Whether or not checkbox is indeterminate. */\n  defaultIndeterminate: _propTypes2.default.bool,\n\n  /** A checkbox can appear disabled and be unable to change states */\n  disabled: _propTypes2.default.bool,\n\n  /** Removes padding for a label. Auto applied when there is no label. */\n  fitted: _propTypes2.default.bool,\n\n  /** Whether or not checkbox is indeterminate. */\n  indeterminate: _propTypes2.default.bool,\n\n  /** The text of the associated label element. */\n  label: _lib.customPropTypes.itemShorthand,\n\n  /** The HTML input name. */\n  name: _propTypes2.default.string,\n\n  /**\n   * Called when the user attempts to change the checked state.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props and proposed checked/indeterminate state.\n   */\n  onChange: _propTypes2.default.func,\n\n  /**\n   * Called when the checkbox or label is clicked.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props and current checked/indeterminate state.\n   */\n  onClick: _propTypes2.default.func,\n\n  /**\n   * Called when the user presses down on the mouse.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props and current checked/indeterminate state.\n   */\n  onMouseDown: _propTypes2.default.func,\n\n  /** Format as a radio element. This means it is an exclusive option. */\n  radio: _lib.customPropTypes.every([_propTypes2.default.bool, _lib.customPropTypes.disallow(['slider', 'toggle'])]),\n\n  /** A checkbox can be read-only and unable to change states. */\n  readOnly: _propTypes2.default.bool,\n\n  /** Format to emphasize the current selection state. */\n  slider: _lib.customPropTypes.every([_propTypes2.default.bool, _lib.customPropTypes.disallow(['radio', 'toggle'])]),\n\n  /** A checkbox can receive focus. */\n  tabIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),\n\n  /** Format to show an on or off choice. */\n  toggle: _lib.customPropTypes.every([_propTypes2.default.bool, _lib.customPropTypes.disallow(['radio', 'slider'])]),\n\n  /** HTML input type, either checkbox or radio. */\n  type: _propTypes2.default.oneOf(['checkbox', 'radio']),\n\n  /** The HTML input value. */\n  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])\n} : {};"},"hash":"c8ca3d167cacf4792e046ce693f193fd"}