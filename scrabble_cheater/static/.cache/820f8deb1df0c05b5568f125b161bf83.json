{"dependencies":[{"name":"babel-runtime/helpers/toConsumableArray","loc":{"line":7,"column":34}},{"name":"babel-runtime/helpers/extends","loc":{"line":11,"column":24}},{"name":"classnames","loc":{"line":15,"column":26}},{"name":"prop-types","loc":{"line":19,"column":25}},{"name":"react","loc":{"line":23,"column":21}},{"name":"../../lib","loc":{"line":27,"column":19}},{"name":"./GridColumn","loc":{"line":29,"column":26}},{"name":"./GridRow","loc":{"line":33,"column":23}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lib = require('../../lib');\n\nvar _GridColumn = require('./GridColumn');\n\nvar _GridColumn2 = _interopRequireDefault(_GridColumn);\n\nvar _GridRow = require('./GridRow');\n\nvar _GridRow2 = _interopRequireDefault(_GridRow);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\n/**\n * A grid is used to harmonize negative space in a layout.\n */\nfunction Grid(props) {\n  var celled = props.celled,\n      centered = props.centered,\n      children = props.children,\n      className = props.className,\n      columns = props.columns,\n      container = props.container,\n      divided = props.divided,\n      doubling = props.doubling,\n      inverted = props.inverted,\n      padded = props.padded,\n      relaxed = props.relaxed,\n      reversed = props.reversed,\n      stackable = props.stackable,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n\n  var classes = (0, _classnames2.default)('ui', (0, _lib.useKeyOnly)(centered, 'centered'), (0, _lib.useKeyOnly)(container, 'container'), (0, _lib.useKeyOnly)(doubling, 'doubling'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(stackable, 'stackable'), (0, _lib.useKeyOnly)(stretched, 'stretched'), (0, _lib.useKeyOrValueAndKey)(celled, 'celled'), (0, _lib.useKeyOrValueAndKey)(divided, 'divided'), (0, _lib.useKeyOrValueAndKey)(padded, 'padded'), (0, _lib.useKeyOrValueAndKey)(relaxed, 'relaxed'), (0, _lib.useMultipleProp)(reversed, 'reversed'), (0, _lib.useTextAlignProp)(textAlign), (0, _lib.useVerticalAlignProp)(verticalAlign), (0, _lib.useWidthProp)(columns, 'column', true), 'grid', className);\n  var rest = (0, _lib.getUnhandledProps)(Grid, props);\n  var ElementType = (0, _lib.getElementType)(Grid, props);\n\n  return _react2.default.createElement(ElementType, (0, _extends3.default)({}, rest, { className: classes }), children);\n}\n\nGrid.handledProps = ['as', 'celled', 'centered', 'children', 'className', 'columns', 'container', 'divided', 'doubling', 'inverted', 'padded', 'relaxed', 'reversed', 'stackable', 'stretched', 'textAlign', 'verticalAlign'];\nGrid.Column = _GridColumn2.default;\nGrid.Row = _GridRow2.default;\n\nGrid._meta = {\n  name: 'Grid',\n  type: _lib.META.TYPES.COLLECTION\n};\n\nGrid.propTypes = \"development\" !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: _lib.customPropTypes.as,\n\n  /** A grid can have rows divided into cells. */\n  celled: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.oneOf(['internally'])]),\n\n  /** A grid can have its columns centered. */\n  centered: _propTypes2.default.bool,\n\n  /** Primary content. */\n  children: _propTypes2.default.node,\n\n  /** Additional classes. */\n  className: _propTypes2.default.string,\n\n  /** Represents column count per row in Grid. */\n  columns: _propTypes2.default.oneOf([].concat((0, _toConsumableArray3.default)(_lib.SUI.WIDTHS), ['equal'])),\n\n  /** A grid can be combined with a container to use the available layout and alignment. */\n  container: _propTypes2.default.bool,\n\n  /** A grid can have dividers between its columns. */\n  divided: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.oneOf(['vertically'])]),\n\n  /** A grid can double its column width on tablet and mobile sizes. */\n  doubling: _propTypes2.default.bool,\n\n  /** A grid's colors can be inverted. */\n  inverted: _propTypes2.default.bool,\n\n  /** A grid can preserve its vertical and horizontal gutters on first and last columns. */\n  padded: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.oneOf(['horizontally', 'vertically'])]),\n\n  /** A grid can increase its gutters to allow for more negative space. */\n  relaxed: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.oneOf(['very'])]),\n\n  /** A grid can specify that its columns should reverse order at different device sizes. */\n  reversed: _lib.customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A grid can have its columns stack on-top of each other after reaching mobile breakpoints. */\n  stackable: _propTypes2.default.bool,\n\n  /** A grid can stretch its contents to take up the entire grid height. */\n  stretched: _propTypes2.default.bool,\n\n  /** A grid can specify its text alignment. */\n  textAlign: _propTypes2.default.oneOf(_lib.SUI.TEXT_ALIGNMENTS),\n\n  /** A grid can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: _propTypes2.default.oneOf(_lib.SUI.VERTICAL_ALIGNMENTS)\n} : {};\n\nexports.default = Grid;"},"hash":"2887c9dee5b8c5b95beea1b1b45435bf"}