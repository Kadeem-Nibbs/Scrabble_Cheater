{"dependencies":[{"name":"babel-runtime/helpers/extends","loc":{"line":7,"column":24}},{"name":"lodash/without","loc":{"line":11,"column":24}},{"name":"lodash/map","loc":{"line":15,"column":20}},{"name":"classnames","loc":{"line":19,"column":26}},{"name":"prop-types","loc":{"line":23,"column":25}},{"name":"react","loc":{"line":27,"column":21}},{"name":"../../lib","loc":{"line":31,"column":19}},{"name":"./TableBody","loc":{"line":33,"column":25}},{"name":"./TableCell","loc":{"line":37,"column":25}},{"name":"./TableFooter","loc":{"line":41,"column":27}},{"name":"./TableHeader","loc":{"line":45,"column":27}},{"name":"./TableHeaderCell","loc":{"line":49,"column":31}},{"name":"./TableRow","loc":{"line":53,"column":24}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _without2 = require('lodash/without');\n\nvar _without3 = _interopRequireDefault(_without2);\n\nvar _map2 = require('lodash/map');\n\nvar _map3 = _interopRequireDefault(_map2);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lib = require('../../lib');\n\nvar _TableBody = require('./TableBody');\n\nvar _TableBody2 = _interopRequireDefault(_TableBody);\n\nvar _TableCell = require('./TableCell');\n\nvar _TableCell2 = _interopRequireDefault(_TableCell);\n\nvar _TableFooter = require('./TableFooter');\n\nvar _TableFooter2 = _interopRequireDefault(_TableFooter);\n\nvar _TableHeader = require('./TableHeader');\n\nvar _TableHeader2 = _interopRequireDefault(_TableHeader);\n\nvar _TableHeaderCell = require('./TableHeaderCell');\n\nvar _TableHeaderCell2 = _interopRequireDefault(_TableHeaderCell);\n\nvar _TableRow = require('./TableRow');\n\nvar _TableRow2 = _interopRequireDefault(_TableRow);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\n/**\n * A table displays a collections of data grouped into rows.\n */\nfunction Table(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      celled = props.celled,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      color = props.color,\n      columns = props.columns,\n      compact = props.compact,\n      definition = props.definition,\n      fixed = props.fixed,\n      footerRow = props.footerRow,\n      headerRow = props.headerRow,\n      inverted = props.inverted,\n      padded = props.padded,\n      renderBodyRow = props.renderBodyRow,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      size = props.size,\n      sortable = props.sortable,\n      stackable = props.stackable,\n      striped = props.striped,\n      structured = props.structured,\n      tableData = props.tableData,\n      textAlign = props.textAlign,\n      unstackable = props.unstackable,\n      verticalAlign = props.verticalAlign;\n\n  var classes = (0, _classnames2.default)('ui', color, size, (0, _lib.useKeyOnly)(celled, 'celled'), (0, _lib.useKeyOnly)(collapsing, 'collapsing'), (0, _lib.useKeyOnly)(definition, 'definition'), (0, _lib.useKeyOnly)(fixed, 'fixed'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(selectable, 'selectable'), (0, _lib.useKeyOnly)(singleLine, 'single line'), (0, _lib.useKeyOnly)(sortable, 'sortable'), (0, _lib.useKeyOnly)(stackable, 'stackable'), (0, _lib.useKeyOnly)(striped, 'striped'), (0, _lib.useKeyOnly)(structured, 'structured'), (0, _lib.useKeyOnly)(unstackable, 'unstackable'), (0, _lib.useKeyOrValueAndKey)(attached, 'attached'), (0, _lib.useKeyOrValueAndKey)(basic, 'basic'), (0, _lib.useKeyOrValueAndKey)(compact, 'compact'), (0, _lib.useKeyOrValueAndKey)(padded, 'padded'), (0, _lib.useTextAlignProp)(textAlign), (0, _lib.useVerticalAlignProp)(verticalAlign), (0, _lib.useWidthProp)(columns, 'column'), 'table', className);\n  var rest = (0, _lib.getUnhandledProps)(Table, props);\n  var ElementType = (0, _lib.getElementType)(Table, props);\n\n  if (!_lib.childrenUtils.isNil(children)) {\n    return _react2.default.createElement(ElementType, (0, _extends3.default)({}, rest, { className: classes }), children);\n  }\n\n  return _react2.default.createElement(ElementType, (0, _extends3.default)({}, rest, { className: classes }), headerRow && _react2.default.createElement(_TableHeader2.default, null, _TableRow2.default.create(headerRow, { defaultProps: { cellAs: 'th' } })), _react2.default.createElement(_TableBody2.default, null, renderBodyRow && (0, _map3.default)(tableData, function (data, index) {\n    return _TableRow2.default.create(renderBodyRow(data, index));\n  })), footerRow && _react2.default.createElement(_TableFooter2.default, null, _TableRow2.default.create(footerRow)));\n}\n\nTable.handledProps = ['as', 'attached', 'basic', 'celled', 'children', 'className', 'collapsing', 'color', 'columns', 'compact', 'definition', 'fixed', 'footerRow', 'headerRow', 'inverted', 'padded', 'renderBodyRow', 'selectable', 'singleLine', 'size', 'sortable', 'stackable', 'striped', 'structured', 'tableData', 'textAlign', 'unstackable', 'verticalAlign'];\nTable._meta = {\n  name: 'Table',\n  type: _lib.META.TYPES.COLLECTION\n};\n\nTable.defaultProps = {\n  as: 'table'\n};\n\nTable.propTypes = \"development\" !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: _lib.customPropTypes.as,\n\n  /** Attach table to other content */\n  attached: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.oneOf(['top', 'bottom'])]),\n\n  /** A table can reduce its complexity to increase readability. */\n  basic: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['very']), _propTypes2.default.bool]),\n\n  /** A table may be divided each row into separate cells. */\n  celled: _propTypes2.default.bool,\n\n  /** Primary content. */\n  children: _propTypes2.default.node,\n\n  /** Additional classes. */\n  className: _propTypes2.default.string,\n\n  /** A table can be collapsing, taking up only as much space as its rows. */\n  collapsing: _propTypes2.default.bool,\n\n  /** A table can be given a color to distinguish it from other tables. */\n  color: _propTypes2.default.oneOf(_lib.SUI.COLORS),\n\n  /** A table can specify its column count to divide its content evenly. */\n  columns: _propTypes2.default.oneOf(_lib.SUI.WIDTHS),\n\n  /** A table may sometimes need to be more compact to make more rows visible at a time. */\n  compact: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.oneOf(['very'])]),\n\n  /** A table may be formatted to emphasize a first column that defines a rows content. */\n  definition: _propTypes2.default.bool,\n\n  /**\n   * A table can use fixed a special faster form of table rendering that does not resize table cells based on content\n   */\n  fixed: _propTypes2.default.bool,\n\n  /** Shorthand for a TableRow to be placed within Table.Footer. */\n  footerRow: _lib.customPropTypes.itemShorthand,\n\n  /** Shorthand for a TableRow to be placed within Table.Header. */\n  headerRow: _lib.customPropTypes.itemShorthand,\n\n  /** A table's colors can be inverted. */\n  inverted: _propTypes2.default.bool,\n\n  /** A table may sometimes need to be more padded for legibility. */\n  padded: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.oneOf(['very'])]),\n\n  /**\n   * Mapped over `tableData` and should return shorthand for each Table.Row to be placed within Table.Body.\n   *\n   * @param {*} data - An element in the `tableData` array.\n   * @param {number} index - The index of the current element in `tableData`.\n   * @returns {*} Shorthand for a Table.Row.\n   */\n  renderBodyRow: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['children']), _lib.customPropTypes.demand(['tableData']), _propTypes2.default.func]),\n\n  /** A table can have its rows appear selectable. */\n  selectable: _propTypes2.default.bool,\n\n  /** A table can specify that its cell contents should remain on a single line and not wrap. */\n  singleLine: _propTypes2.default.bool,\n\n  /** A table can also be small or large. */\n  size: _propTypes2.default.oneOf((0, _without3.default)(_lib.SUI.SIZES, 'mini', 'tiny', 'medium', 'big', 'huge', 'massive')),\n\n  /** A table may allow a user to sort contents by clicking on a table header. */\n  sortable: _propTypes2.default.bool,\n\n  /** A table can specify how it stacks table content responsively. */\n  stackable: _propTypes2.default.bool,\n\n  /** A table can stripe alternate rows of content with a darker color to increase contrast. */\n  striped: _propTypes2.default.bool,\n\n  /** A table can be formatted to display complex structured data. */\n  structured: _propTypes2.default.bool,\n\n  /** Data to be passed to the renderBodyRow function. */\n  tableData: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['children']), _lib.customPropTypes.demand(['renderBodyRow']), _propTypes2.default.array]),\n\n  /** A table can adjust its text alignment. */\n  textAlign: _propTypes2.default.oneOf((0, _without3.default)(_lib.SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table can specify how it stacks table content responsively. */\n  unstackable: _propTypes2.default.bool,\n\n  /** A table can adjust its text alignment. */\n  verticalAlign: _propTypes2.default.oneOf(_lib.SUI.VERTICAL_ALIGNMENTS)\n} : {};\n\nTable.Body = _TableBody2.default;\nTable.Cell = _TableCell2.default;\nTable.Footer = _TableFooter2.default;\nTable.Header = _TableHeader2.default;\nTable.HeaderCell = _TableHeaderCell2.default;\nTable.Row = _TableRow2.default;\n\nexports.default = Table;"},"hash":"e40df4b2b4405f3defff39ba412de7dd"}